{"version":3,"sources":["components/TextArea/index.js","components/Input/index.js","pages/Contact/index.js","components/Heading/index.js","components/DecoderText/index.js","components/Section/index.js","assets/fonts/gotham-bold.woff2","components/Divider/index.js"],"names":["TextArea","className","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","style","getComputedStyle","current","lineHeight","parseInt","paddingHeight","paddingTop","paddingBottom","classNames","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","numToMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","500","404","getStatusError","Error","Section","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","Divider","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","secondary","href","children","align","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","glyphs","CharType","memo","startDelay","output","container","reduceMotion","usePrefersReducedMotion","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","aria-hidden","forwardRef","module","exports","lineWidth","notchWidth","notchHeight","collapseDelay","collapsed","defaultProps"],"mappings":"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","file":"static/js/6.b95cad26.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from 'components/TextArea';\nimport { useId } from 'hooks';\nimport './index.css';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState, useCallback, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport { Helmet } from 'react-helmet-async';\nimport Input from 'components/Input';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport { Button } from 'components/Button';\nimport Section from 'components/Section';\nimport Icon from 'components/Icon';\nimport Heading from 'components/Heading';\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks';\nimport { reflow, isVisible } from 'utils/transition';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToPx, numToMs } from 'utils/style';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport './index.css';\n\nconst initDelay = tokens.base.durationS;\n\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('/functions/sendMessage', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Veebor</title>\n        <meta\n          name=\"description\"\n          content=\"Send us a message if you’re interested in discussing a project\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <h1\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </h1>\n                <p\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days\n                </p>\n                <Button\n                  secondary\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n","import React, { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet-async';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'start',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import React, { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n  'A', 'a', 'B', 'b', 'C', 'c', 'D', 'd',\n  'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h',\n  'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l',\n  'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p',\n  'Q', 'q', 'R', 'r', 'S', 's', 'T', 't',\n  'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x',\n  'Y', 'y', 'Z', 'z',\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      container.current.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <span className=\"decoder-text__label\">{text}</span>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","module.exports = __webpack_public_path__ + \"static/media/gotham-bold.f83805fc.woff2\";","import React from 'react';\nimport classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '90px',\n  notchHeight: '10px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n"],"sourceRoot":""}