{"version":3,"sources":["assets/selfie.glb","pages/Home/Selfie.js"],"names":["module","exports","Selfie","className","delay","alt","rest","colorWhite","themeId","rgbBackgroundLight","useTheme","container","useRef","canvas","renderer","camera","scene","lights","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","useEffect","clientWidth","clientHeight","current","WebGLRenderer","powerPreference","setPixelRatio","renderPixelRatio","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","PerspectiveCamera","position","z","Scene","GLTFLoader","load","selfieModelPath","model","traverse","node","isMesh","material","shading","SmoothShading","geometry","computeVertexNormals","add","y","cleanScene","cleanRenderer","ambientLight","AmbientLight","dirLight","DirectionalLight","set","background","rgbToThreeColor","forEach","light","removeLights","handleResize","aspect","updateProjectionMatrix","render","window","addEventListener","removeEventListener","rotationSpring","rotationSpringValue","onMouseMove","event","rotation","innerWidth","innerHeight","clientX","clientY","value","x","spring","from","get","to","stiffness","damping","velocity","getVelocity","restSpeed","mass","start","stop","animation","animate","requestAnimationFrame","cancelAnimationFrame","classNames","ref","style","role","aria-label","aria-hidden"],"mappings":"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","file":"static/js/15.f7f32927.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/selfie.8ec45f3c.glb\";","import React, { useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport {\n  WebGLRenderer,\n  sRGBEncoding,\n  Scene,\n  PerspectiveCamera,\n  SmoothShading,\n  AmbientLight,\n  DirectionalLight,\n} from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { spring, value } from 'popmotion';\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\nimport { renderPixelRatio, cleanScene, cleanRenderer, removeLights } from 'utils/three';\nimport { rgbToThreeColor } from 'utils/style';\nimport { useTheme } from 'components/ThemeProvider';\nimport selfieModelPath from 'assets/selfie.glb';\nimport './Selfie.css';\n\nconst Selfie = ({ className, delay, alt, ...rest }) => {\n  const { colorWhite, themeId, rgbBackgroundLight } = useTheme();\n  const container = useRef();\n  const canvas = useRef();\n  const renderer = useRef();\n  const camera = useRef();\n  const scene = useRef();\n  const lights = useRef();\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const isInViewport = useInViewport(canvas);\n\n  // Init scene and models\n  useEffect(() => {\n    const { clientWidth, clientHeight } = container.current;\n\n    renderer.current = new WebGLRenderer({\n      canvas: canvas.current,\n      powerPreference: 'high-performance',\n    });\n\n    renderer.current.setPixelRatio(renderPixelRatio);\n    renderer.current.setSize(clientWidth, clientHeight);\n    renderer.current.outputEncoding = sRGBEncoding;\n    renderer.current.physicallyCorrectLights = true;\n\n    camera.current = new PerspectiveCamera(45, clientWidth / clientHeight, 0.1, 800);\n    camera.current.position.z = 24;\n\n    scene.current = new Scene();\n\n    const modelLoader = new GLTFLoader();\n\n    modelLoader.load(selfieModelPath, model => {\n      model.scene.traverse(node => {\n        if (node.isMesh) {\n          node.material.shading = SmoothShading;\n          node.geometry.computeVertexNormals(true);\n        }\n      });\n\n      scene.current.add(model.scene);\n      model.scene.position.y = -8;\n    });\n\n    return () => {\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n    };\n  }, []);\n\n  // Lights\n  useEffect(() => {\n    const ambientLight = new AmbientLight(colorWhite, 0.8);\n    const dirLight = new DirectionalLight(colorWhite, themeId === 'light' ? 1.6 : 0.8);\n\n    dirLight.position.set(30, 20, 32);\n\n    lights.current = [ambientLight, dirLight];\n    scene.current.background = rgbToThreeColor(rgbBackgroundLight);\n    lights.current.forEach(light => scene.current.add(light));\n\n    return () => {\n      removeLights(lights.current);\n    };\n  }, [colorWhite, themeId, rgbBackgroundLight]);\n\n  // Handles window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const { clientWidth, clientHeight } = container.current;\n\n      renderer.current.setSize(clientWidth, clientHeight);\n      camera.current.aspect = clientWidth / clientHeight;\n      camera.current.updateProjectionMatrix();\n\n      if (prefersReducedMotion) {\n        renderer.current.render(scene.current, camera.current);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [prefersReducedMotion]);\n\n  // Handle mouse move animation\n  useEffect(() => {\n    let rotationSpring;\n    let rotationSpringValue;\n\n    const onMouseMove = event => {\n      const { rotation } = scene.current;\n      const { innerWidth, innerHeight } = window;\n\n      const position = {\n        x: (event.clientX - innerWidth / 2) / innerWidth,\n        y: (event.clientY - innerHeight / 2) / innerHeight,\n      };\n\n      if (!rotationSpringValue) {\n        rotationSpringValue = value({ x: rotation.x, y: rotation.y }, ({ x, y }) => {\n          rotation.set(x, y, rotation.z);\n        });\n      }\n\n      rotationSpring = spring({\n        from: rotationSpringValue.get(),\n        to: { x: position.y / 2, y: position.x / 2 },\n        stiffness: 40,\n        damping: 40,\n        velocity: rotationSpringValue.getVelocity(),\n        restSpeed: 0.00001,\n        mass: 1.4,\n      }).start(rotationSpringValue);\n    };\n\n    if (isInViewport && !prefersReducedMotion) {\n      window.addEventListener('mousemove', onMouseMove);\n    }\n\n    return function cleanup() {\n      window.removeEventListener('mousemove', onMouseMove);\n\n      if (rotationSpring) {\n        rotationSpring.stop();\n      }\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  // Handles renders\n  useEffect(() => {\n    let animation;\n\n    const animate = () => {\n      animation = requestAnimationFrame(animate);\n\n      renderer.current.render(scene.current, camera.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      animate();\n    } else {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  return (\n    <div\n      className={classNames('selfie', className)}\n      ref={container}\n      style={{ '--delay': delay }}\n      role=\"img\"\n      aria-label={alt}\n      {...rest}\n    >\n      <canvas aria-hidden className=\"selfie__canvas\" ref={canvas} />\n    </div>\n  );\n};\n\nexport default Selfie;\n"],"sourceRoot":""}